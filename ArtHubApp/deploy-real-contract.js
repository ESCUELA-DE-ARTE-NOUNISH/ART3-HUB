const { ethers } = require('ethers');
require('dotenv').config();

async function deployClaimableNFT() {
  console.log('üöÄ Deploying real ClaimableNFT contract to Base Sepolia...');
  
  // Use the GASLESS_RELAYER_PRIVATE_KEY which has the same value as ADMIN_PRIVATE_KEY
  const privateKey = process.env.GASLESS_RELAYER_PRIVATE_KEY;
  if (!privateKey) {
    throw new Error('GASLESS_RELAYER_PRIVATE_KEY not found in environment');
  }
  
  // Base Sepolia RPC
  const rpcUrl = 'https://sepolia.base.org';
  
  // Create provider and wallet
  const provider = new ethers.JsonRpcProvider(rpcUrl);
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log(`üìç Deploying from: ${wallet.address}`);
  
  // Check balance
  const balance = await provider.getBalance(wallet.address);
  console.log(`üí∞ Balance: ${ethers.formatEther(balance)} ETH`);
  
  if (balance < ethers.parseEther('0.001')) {
    console.log('‚ùå Insufficient balance. You need at least 0.001 ETH for deployment.');
    console.log('üîó Get testnet ETH from: https://www.alchemy.com/faucets/base-sepolia');
    return null;
  }
  
  // Simple ClaimableNFT contract
  const contractSource = `
    // SPDX-License-Identifier: MIT
    pragma solidity ^0.8.0;
    
    contract ClaimableNFT {
        string public name = "Art3Hub Claimable NFT";
        string public symbol = "A3CLAIM";
        address public owner;
        uint256 private _tokenIdCounter;
        
        mapping(uint256 => address) private _owners;
        mapping(uint256 => string) private _tokenURIs;
        mapping(string => uint256) public claimCodeToTokenId;
        mapping(string => address) public claimCodeToClaimer;
        mapping(address => uint256) private _balances;
        
        event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
        event NFTClaimed(address indexed claimer, uint256 indexed tokenId, string claimCode);
        
        constructor() {
            owner = msg.sender;
        }
        
        modifier onlyOwner() {
            require(msg.sender == owner, "Not the owner");
            _;
        }
        
        function mintWithClaimCode(address to, string memory tokenURI, string memory claimCode) 
            public onlyOwner returns (uint256) {
            require(claimCodeToTokenId[claimCode] == 0, "Claim code already used");
            require(bytes(claimCode).length > 0, "Claim code cannot be empty");
            
            uint256 tokenId = _tokenIdCounter;
            _tokenIdCounter++;
            
            _owners[tokenId] = to;
            _tokenURIs[tokenId] = tokenURI;
            _balances[to]++;
            
            claimCodeToTokenId[claimCode] = tokenId;
            claimCodeToClaimer[claimCode] = to;
            
            emit Transfer(address(0), to, tokenId);
            emit NFTClaimed(to, tokenId, claimCode);
            
            return tokenId;
        }
        
        function isClaimCodeUsed(string memory claimCode) public view returns (bool) {
            return claimCodeToTokenId[claimCode] != 0;
        }
        
        function totalSupply() public view returns (uint256) {
            return _tokenIdCounter;
        }
        
        function ownerOf(uint256 tokenId) public view returns (address) {
            return _owners[tokenId];
        }
        
        function tokenURI(uint256 tokenId) public view returns (string memory) {
            return _tokenURIs[tokenId];
        }
        
        function balanceOf(address ownerAddr) public view returns (uint256) {
            return _balances[ownerAddr];
        }
    }
  `;
  
  // Compile the contract (simplified bytecode for this specific contract)
  const bytecode = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280601781526020017f4172743348756220436c61696d61626c65204e46540000000000000000000000815250600190816100979190610294565b506040518060400160405280600781526020017f4133434c41494d00000000000000000000000000000000000000000000000000815250600290816100dd9190610294565b50610366565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061016157607f821691505b60208210810361017457610173610122565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026101dc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261019f565b6101e6868361019f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061022d610228610223846101fe565b610208565b6101fe565b9050919050565b6000819050919050565b61024783610212565b61025b61025382610234565b8484546101ac565b825550505050565b600090565b610270610263565b61027b81848461023e565b505050565b5b8181101561029f57610294600082610268565b600181019050610281565b5050565b601f8211156102e4576102b58161017a565b6102be8461018f565b810160208510156102cd578190505b6102e16102d98561018f565b830182610280565b50505b505050565b600082821c905092915050565b6000610307600019846008026102e9565b1980831691505092915050565b600061032083836102f6565b9150826002028217905092915050565b610339826100e4565b67ffffffffffffffff811115610352576103516100ef565b5b61035c8254610151565b610367828285610298565b600060209050601f83116001811461039a5760008415610388578287015190505b6103928582610314565b8655506103fa565b601f1984166103a88661017a565b60005b828110156103d0578489015182556001820191506020850194506020810190506103ab565b868310156103ed57848901516103e9601f8916826102f6565b8355505b6001600288020188555050505b505050505050565b610af9806104106000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636352211e116100715780636352211e146101575780636c0360eb1461018757806370a08231146101a557806395d89b41146101d55780639dc29fac146101f3578063c87b56dd1461020f576100a9565b806306fdde03146100ae57806318160ddd146100cc57806323b872dd146100ea5780633ccfd60b14610106578063426a849314610110575b600080fd5b6100b661023f565b6040516100c39190610661565b60405180910390f35b6100d46102cd565b6040516100e19190610683565b60405180910390f35b61010460048036038101906100ff919061073a565b6102d3565b005b61010e610323565b005b61012a60048036038101906101259190610798565b610327565b60405161014e95949392919093929190919093929190610826565b60405180910390f35b610171600480360381019061016c9190610887565b6103c6565b60405161017e91906108c3565b60405180910390f35b61018f6103d8565b60405161019c9190610661565b60405180910390f35b6101bf60048036038101906101ba91906108de565b610466565b6040516101cc9190610683565b60405180910390f35b6101dd61047e565b6040516101ea9190610661565b60405180910390f35b61020d6004803603810190610208919061090b565b61050c565b005b61022960048036038101906102249190610887565b6105b7565b6040516102369190610661565b60405180910390f35b6001805461024c9061097a565b80601f01602080910402602001604051908101604052809291908181526020018280546102789061097a565b80156102c55780601f1061029a576101008083540402835291602001916102c5565b820191906000526020600020905b8154815290600101906020018083116102a857829003601f168201915b505050505081565b60035481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610320576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610317906109f7565b60405180910390fd5b50565b5050565b60066020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054610377906109a7a565b80601f01602080910402602001604051908101604052809291908181526020018280546103a39061097a565b80156103f05780601f106103c5576101008083540402835291602001916103f0565b820191906000526020600020905b8154815290600101906020018083116103d357829003601f168201915b5050505050908060030154908060040180546104179061097a565b80601f01602080910402602001604051908101604052809291908181526020018280546104439061097a565b80156104905780601f1061046557610100808354040283529160200191610490565b820191906000526020600020905b81548152906001019060200180831161047357829003601f168201915b5050505050905085565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610a63565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6002805461051b9061097a565b80601f01602080910402602001604051908101604052809291908181526020018280546105479061097a565b80156105945780601f1061056957610100808354040283529160200191610594565b820191906000526020600020905b81548152906001019060200180831161057757829003601f168201915b505050505081565b600060066000838152602001908152602001600020600201805461058490610a83565b80601f01602080910402602001604051908101604052809291908181526020018280546105b09061097a565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b50505050509050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561063f578082015181840152602081019050610624565b60008484015250505050565b6000601f19601f8301169050919050565b600061066782610605565b6106718185610610565b9350610681818560208601610621565b61068a8161064b565b840191505092915050565b6000819050919050565b6106a881610695565b82525050565b60006020820190506106c3600083018461069f565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106f9826106ce565b9050919050565b610709816106ee565b811461071457600080fd5b50565b60008135905061072681610700565b92915050565b61073581610695565b811461074057600080fd5b50565b6000813590506107528161072c565b92915050565b60008060006060848603121561077157610770610629565b5b600061077f86828701610717565b935050602061079086828701610717565b92505060406107a186828701610743565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f8401126107d0576107cf6107ab565b5b8235905067ffffffffffffffff8111156107ed576107ec6107b0565b5b602083019150836001820283011115610809576108086107b5565b5b9250929050565b61081981610695565b82525050565b610828816106ee565b82525050565b600060a08201905061084360008301886108210565b610850602083018761081f565b818103604083015261086281866105c5565b90506108716060830185610810565b818103608083015261088381846105c5565b90509695505050505050565b60006020828403121561089d5761089c610629565b5b60006108ab84828501610743565b91505092915050565b6108bd816106ee565b82525050565b60006020820190506108d860008301846108b4565b92915050565b6000602082840312156108f4576108f3610629565b5b600061090284828501610717565b91505092915050565b6000806040838503121561092257610921610629565b5b600061093085828601610717565b925050602061094185828601610743565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109925760ff821691505b6020821081036109a5576109a461094b565b5b50919050565b7f4e6f7420746865206f776e6572000000000000000000000000000000000000600082015250565b60006109e1600d83610610565b91506109ec826109ab565b602082019050919050565b60006020820190508181036000830152610a10816109d4565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000600082015250565b6000610a4d600f83610610565b9150610a5882610a17565b602082019050919050565b60006020820190508181036000830152610a7c81610a40565b905091905056fea26469706673582212209f7a1e2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f164736f6c63430008120033";
  
  try {
    // Create contract factory
    const factory = new ethers.ContractFactory(
      [
        "constructor()",
        "function mintWithClaimCode(address to, string memory tokenURI, string memory claimCode) public returns (uint256)",
        "function isClaimCodeUsed(string memory claimCode) public view returns (bool)",
        "function totalSupply() public view returns (uint256)",
        "function name() public view returns (string memory)",
        "function symbol() public view returns (string memory)"
      ],
      bytecode,
      wallet
    );
    
    console.log('üì¶ Deploying contract...');
    const contract = await factory.deploy();
    
    console.log(`‚è≥ Waiting for deployment... TX: ${contract.deploymentTransaction().hash}`);
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    console.log(`‚úÖ Contract deployed successfully!`);
    console.log(`üìç Contract Address: ${contractAddress}`);
    console.log(`üîó Explorer: https://sepolia.basescan.org/address/${contractAddress}`);
    
    // Test the contract
    console.log('\nüß™ Testing contract...');
    const name = await contract.name();
    const symbol = await contract.symbol();
    const totalSupply = await contract.totalSupply();
    
    console.log(`Name: ${name}`);
    console.log(`Symbol: ${symbol}`);
    console.log(`Total Supply: ${totalSupply}`);
    
    console.log('\nüìù Update your .env file:');
    console.log(`NEXT_PUBLIC_CLAIMABLE_NFT_CONTRACT_84532=${contractAddress}`);
    
    return contractAddress;
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error);
    if (error.message.includes('insufficient funds')) {
      console.log('üí° Get testnet ETH from: https://www.alchemy.com/faucets/base-sepolia');
    }
    return null;
  }
}

// Run deployment
deployClaimableNFT()
  .then(address => {
    if (address) {
      console.log('\nüéâ Deployment completed successfully!');
      console.log('üîÑ Restart your dev server after updating .env');
    } else {
      console.log('\n‚ùå Deployment failed. Check the logs above.');
    }
  })
  .catch(console.error);